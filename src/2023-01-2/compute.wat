(module
  (global $zero (import "nums" "zero") i64)
  (global $one (import "nums" "one") i64)
  (global $two (import "nums" "two") i64)
  (global $three (import "nums" "three") i64)
  (global $four (import "nums" "four") i64)
  (global $five (import "nums" "five") i64)
  (global $six (import "nums" "six") i64)
  (global $seven (import "nums" "seven") i64)
  (global $eight (import "nums" "eight") i64)
  (global $nine (import "nums" "nine") i64)
  (memory (export "mem") 1)

  (func $readDigit (param $i i32) (result i32)
    (local $char i32)
    (local $chars i64)
    (local.set $char (i32.load8_u (local.get $i)))
    (if (i32.and (i32.ge_u (local.get $char) (i32.const 0x30)) (i32.lt_u (local.get $char) (i32.const 0x3A)))
      (return (i32.sub (local.get $char) (i32.const 0x30)))
    )

    (local.set $chars (i64.load (local.get $i)))
    (if (i64.eq (i64.and (i64.const 0x00000000FFFFFFFF) (local.get $chars)) (global.get $zero))
      (return (i32.const 0))
    )
    (if (i64.eq (i64.and (i64.const 0x0000000000FFFFFF) (local.get $chars)) (global.get $one))
      (return (i32.const 1))
    )
    (if (i64.eq (i64.and (i64.const 0x0000000000FFFFFF) (local.get $chars)) (global.get $two))
      (return (i32.const 2))
    )
    (if (i64.eq (i64.and (i64.const 0x000000FFFFFFFFFF) (local.get $chars)) (global.get $three))
      (return (i32.const 3))
    )
    (if (i64.eq (i64.and (i64.const 0x00000000FFFFFFFF) (local.get $chars)) (global.get $four))
      (return (i32.const 4))
    )
    (if (i64.eq (i64.and (i64.const 0x00000000FFFFFFFF) (local.get $chars)) (global.get $five))
      (return (i32.const 5))
    )
    (if (i64.eq (i64.and (i64.const 0x0000000000FFFFFF) (local.get $chars)) (global.get $six))
      (return (i32.const 6))
    )
    (if (i64.eq (i64.and (i64.const 0x000000FFFFFFFFFF) (local.get $chars)) (global.get $seven))
      (return (i32.const 7))
    )
    (if (i64.eq (i64.and (i64.const 0x000000FFFFFFFFFF) (local.get $chars)) (global.get $eight))
      (return (i32.const 8))
    )
    (if (i64.eq (i64.and (i64.const 0x00000000FFFFFFFF) (local.get $chars)) (global.get $nine))
      (return (i32.const 9))
    )

    (i32.const -1)
  )

  (func (export "calculate") (param $byteLength i32) (result i32)
    (local $sum i32)
    (local $seenNum i32)
    (local $firstNum i32)
    (local $lastNum i32)
    (local $i i32)
    (local $num i32)

    (loop $loop
      (if (i32.lt_u (local.get $i) (local.get $byteLength))
        (then
          (if (i32.and (i32.eq (i32.const 0x0A) (i32.load8_u (local.get $i))) (local.get $seenNum))
            (then
              (local.set $sum
                (i32.add
                  (local.get $sum)
                  (i32.add
                    (i32.mul
                      (local.get $firstNum)
                      (i32.const 10)
                    )
                    (local.get $lastNum)
                  )
                )
              )
              (local.set $seenNum (i32.const 0))
            )
            (else
              (local.tee $num (call $readDigit (local.get $i)))
              
              (if (i32.ne (i32.const -1))
                (then
                  (local.set $lastNum (local.get $num))
                  (if (local.get $seenNum)
                    (then)
                    (else
                      (local.set $firstNum (local.get $num))
                      (local.set $seenNum (i32.const 1))
                    )
                  )
                )
              )
            )
          ) 
          (local.set $i (i32.add (local.get $i) (i32.const 1)))
          (br $loop)
        )
      )
    )
 
    (local.get $sum)
  )
)
