(module
  (import "reader" "nextGame" (func $nextGame (param externref) (result i32)))
  (import "reader" "nextDraw" (func $nextDraw (param externref) (result i32) (result i32) (result i32)))

  (func (export "compute") (param $instance externref) (result i32)
    (local $sum i32)
    (local $drawRed i32)
    (local $drawGreen i32)
    (local $drawBlue i32)
    (local $minRed i32)
    (local $minGreen i32)
    (local $minBlue i32)
    (loop $gameLoop
      (if (call $nextGame (local.get $instance))
        (then
          (local.set $minRed (i32.const 0))
          (local.set $minGreen(i32.const 0))
          (local.set $minBlue (i32.const 0))
          (loop $drawLoop
            (call $nextDraw (local.get $instance))
            (local.set $drawBlue)
            (local.set $drawGreen)
            (local.set $drawRed)
            (if (i32.eq (local.get $drawRed) (i32.const -1))
              (then
                (local.set $sum (i32.add (local.get $sum) (i32.mul
                  (local.get $minRed)
                  (i32.mul
                    (local.get $minGreen)
                    (local.get $minBlue)
                  )
                )))
                (br $gameLoop)
              )
            )
            (if (i32.gt_s (local.get $drawRed) (local.get $minRed))
              (then (local.set $minRed (local.get $drawRed)))
            )
            (if (i32.gt_s (local.get $drawGreen) (local.get $minGreen))
              (then (local.set $minGreen (local.get $drawGreen)))
            )
            (if (i32.gt_s (local.get $drawBlue) (local.get $minBlue))
              (then (local.set $minBlue (local.get $drawBlue)))
            )
            (br $drawLoop)
          )
          (br $gameLoop)
        )
      )
    )
  (return (local.get $sum))
  )
)
